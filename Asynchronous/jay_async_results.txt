#######################
########       ########
######  Results  ######
########       ########
#######################


Original baseline:
async_baseline.py
iterations = 500
num_workers = 5
learning rate = 0.03

Final accuracy for Aynchronous is 96.3.
Total time for Asynchronous: 77.09075403213501 seconds

===========================================================

###########################################
###  Changing Parameter Server Updates  ###
###########################################

1. Original - Sum + Mean:
ps_update_rule/async_sum2mean.py

Final accuracy for Aynchronous is 95.1.
Total time for Asynchronous: 108.99456524848938 seconds

2. Original - SGD + Adam:
ps_update_rule/async_sgd2other.py

Final accuracy for Aynchronous is 10.7.
Total time for Asynchronous: 172.5345847606659 seconds

3. Original - SGD + Adagrad:
ps_update_rule/async_sgd2other.py

Final accuracy for Aynchronous is 95.8.
Total time for Asynchronous: 166.5284299850464 seconds

===========================================================

################################
###  Changing Learning Rate  ###
################################

1. Original - 0.03 + 0.01:
async_baseline.py

Final accuracy for Aynchronous is 92.6.
Total time for Asynchronous: 159.59600925445557 seconds


===========================================================

###############################################################
###  Changing Number of Workers to Update Parameter Server  ###
###############################################################

1. Original - (1 worker updates) + (2 worker updates):
num_workers_ps_update_rule/async_2workers_ps_update.py

Final accuracy for Asynchronous is TODO.
Total time for Asynchronous: TODO seconds

2. Original - (5 worker updates) + (4 worker updates):
num_workers_ps_update_rule/async_4workers_ps_update.py

Final accuracy for Synchronous is TODO.
Total time for Synchronous: TODO seconds

===========================================================

###############################################
###  Changing Gradient Staleness Tolerance  ###
###############################################

1. Original - (infinite push tolerance) + (1 push tolerance):
stale_gradients_tolerance_rule/async_staleness1.py

Final accuracy for Asynchronous is TODO.
Total time for Asynchronous: TODO seconds

2. Original - (infinite push tolerance) + (10 push tolerance):
stale_gradients_tolerance_rule/async_staleness10.py

Final accuracy for Asynchronous is TODO.
Total time for Asynchronous: TODO seconds

3. Original - (infinite push tolerance) + (100 push tolerance):
stale_gradients_tolerance_rule/async_staleness100.py

Final accuracy for Asynchronous is TODO.
Total time for Asynchronous: TODO seconds

===========================================================

#############################
###  Changing Batch Size  ###
#############################

1. Original - (128 batch size) + (256 batch size):
batch_size_update_rule/async_256_batch_size.py

Final accuracy for Asynchronous is TODO.
Total time for Asynchronous: TODO seconds

2. Original - (128 batch size) + (64 batch size):
batch_size_update_rule/async_64_batch_size.py

Final accuracy for Asynchronous is TODO.
Total time for Asynchronous: TODO seconds

===========================================================

####################################
###  Changing Number of Workers  ###
####################################

1. Original - (5 workers) + (2 workers):
num_workers_rule/async_2workers.py

Final accuracy for Asynchronous is TODO.
Total time for Asynchronous: TODO seconds

2. Original - (5 workers) + (8 workers):
num_workers_rule/async_8workers.py

Final accuracy for Asynchronous is TODO.
Total time for Asynchronous: TODO seconds

===========================================================
